name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Only on version tags (e.g., v1.0.0)
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write
  packages: write

jobs:
  build-macos-arm:
    runs-on: macos-14  # Apple Silicon (M1/M2/M3)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build macOS app (ARM64)
        run: python3 build_macos.py
      
      - name: Remove quarantine from .app
        run: |
          xattr -cr dist/DineSysPro.app || true
          xattr -cr dist/*.dmg || true
      
      - name: Rename DMG for ARM
        run: |
          if [ -f dist/DineSysPro-1.0.2-macOS.dmg ]; then
            mv dist/DineSysPro-1.0.2-macOS.dmg dist/DineSysPro-1.0.2-macOS-ARM64.dmg
          fi
      
      - name: Upload macOS ARM artifact
        uses: actions/upload-artifact@v4
        with:
          name: DineSysPro-macOS-ARM64
          path: dist/*.dmg
  
  build-macos-intel:
    runs-on: macos-13  # Intel (x86_64)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build macOS app (Intel)
        run: python3 build_macos.py
      
      - name: Remove quarantine from .app
        run: |
          xattr -cr dist/DineSysPro.app || true
          xattr -cr dist/*.dmg || true
      
      - name: Rename DMG for Intel
        run: |
          if [ -f dist/DineSysPro-1.0.2-macOS.dmg ]; then
            mv dist/DineSysPro-1.0.2-macOS.dmg dist/DineSysPro-1.0.2-macOS-Intel.dmg
          fi
      
      - name: Upload macOS Intel artifact
        uses: actions/upload-artifact@v4
        with:
          name: DineSysPro-macOS-Intel
          path: dist/*.dmg

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build Windows app
        run: python build_windows.py
      
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: DineSysPro-Windows
          path: dist/*.exe

  create-release:
    needs: [build-macos-arm, build-macos-intel, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            DineSysPro-macOS-ARM64/*
            DineSysPro-macOS-Intel/*
            DineSysPro-Windows/*
          draft: false
          prerelease: false
          body: |
            ## DineSysPro v${{ github.ref_name }}
            
            ### macOS Installation
            - **Apple Silicon (M1/M2/M3)**: Download `DineSysPro-*-macOS-ARM64.dmg`
            - **Intel Macs**: Download `DineSysPro-*-macOS-Intel.dmg`
            
            After installation, run in Terminal:
            ```bash
            xattr -cr /Applications/DineSysPro.app
            ```
            
            ### Windows Installation
            - Download and run `DineSysPro.exe`
            
            For full installation guide, see [INSTALLATIONSGUIDE.md](https://github.com/Arsam1313/mars_syspro_universal/blob/main/INSTALLATIONSGUIDE.md)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
